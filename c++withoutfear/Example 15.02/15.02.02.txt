// Exercise 15.02.02.
// This version of Tower of Hanoi builds on previous
// exercise, 15.02.01, but uses new and delete ops
// rather than a static array.
//

#include <iostream>

using namespace std;

// Declare three pole positions, or rather, stacks.
// Each stack is an object containing ring values.
// stacks[3] is an array three of these objects.

class mystack {
   public:
      int *p_rings;   // Ptr to dynamically-allocated stack.
      int tos;                  // Top-of-stack indicator.
      void populate(int size);  // Init. full stack of rings 1-N.
      void clear(int size);     // Clear stack of N rings.
      void push(int n);
      int pop(void);
} stacks[3];

void mystack::populate(int size) {
     if (p_rings)
          delete [] p_rings;
     p_rings = new int[size];
     for (int i = 0; i < size; i++)
          p_rings[i] = i + 1;
     tos = -1;
}

void mystack::clear(int size) {
     if (p_rings)
          delete [] p_rings;
     p_rings = new int[size];
     for (int i = 0; i < size; i++)
          p_rings[i] = 0;
     tos = size - 1;
}

void mystack::push(int n) {
     p_rings[tos--] = n;
}

int mystack::pop(void) {
     int n = p_rings[++tos];
     p_rings[tos] = 0;
     return n;   
}              

void move_stacks(int source, int dest, int other, int n);
void move_a_ring(int source, int dest);
void print_stacks(void);
void pr_chars(int ch, int n); 

int stack_size = 7;     

int main() {
    while (true) {
         cout << "Enter # of rings (1 to 10, 0 to exit): ";
         cin >> stack_size;
         while (stack_size < 0 || stack_size > 10) {
              cout << "Enter # of rings (1 to 10, 0 to exit): ";
              cin >> stack_size;
         } 
         if (stack_size == 0)
             break;

         stacks[0].populate(stack_size);
         stacks[1].clear(stack_size);
         stacks[2].clear(stack_size);
         print_stacks();
         move_stacks(stack_size, 0, 2, 1);
    }
    return 0;
}

// Move stacks: solve problem recursively...
// move N stacks by assuming problem solved for N-1.
//
void move_stacks(int n, int source, int dest, int other) {
     if (n == 1)
          move_a_ring(source, dest);
     else {
          move_stacks(n-1, source, other, dest);
          move_a_ring(source, dest);
          move_stacks(n-1, other, dest, source);
     }
}

// Move a Ring: Pop off a ring from source stack,
// place it on destination stack, and print new state.
//
void move_a_ring(int source, int dest) {
     int n = stacks[source].pop(); // Pop ring off source.
     stacks[dest].push(n);         // Push onto destination.
     print_stacks();               // Show the new state.
}

void print_stacks(void) {
   int n = 0;
   for (int i = 0; i < stack_size; i++) { // For each level,
      for (int j = 0; j < 3; j++) {     //  print each stack
         n = stacks[j].p_rings[i];      
         pr_chars(' ', 12 - n);
         pr_chars('*', 2 * n);
         pr_chars(' ', 12 - n);
      }
      cout << endl;
   }
   system("PAUSE");
}

void pr_chars(int ch, int n) {
     for (int i = 0; i < n; i++)
          cout << (char) ch;
}             

