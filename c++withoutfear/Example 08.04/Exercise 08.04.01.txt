// Exercise 08.04.01
// This program is similar to readbin.cpp, except that it
//  does a binary read using a different record structure:
//  model (char * 20); make (char * 20); year (char * 5); mileage (int)


#include <iostream>
#include <fstream>
using namespace std;

int get_int(int default_value);

// Record-field declarations -- leave room for terminating byte

char model[21];
char make[21];
char year[6];
int  mileage;

int main() {
    char filename[81];
    int n;

// Note recsize is different for this example.

    int recsize = sizeof(model) + sizeof(make) + sizeof(year) + sizeof(int);
    

    cout << "Enter file name: ";
    cin.getline(filename, 80);

    // Open file for binary-read access.

    fstream  fbin(filename, ios::binary | ios::in);
    if (!fbin) {
        cout << "Could not open file " << filename << endl;
        system("PAUSE");
        return -1;
    }

    // Get record number and go to record.

    cout << "Enter file record number: ";
    n = get_int(0);
    fbin.seekp(n * recsize);

    // Read data from the file.

    fbin.read(model, 20);
    fbin.read(make, 20);
    fbin.read(year, 5);
    fbin.read(reinterpret_cast<char*>(&mileage), sizeof(int));

    // Display the data and close.
    
    cout << "The model is: " << model << endl;
    cout << "The make is: " << make << endl;
    cout << "The year is: " << year << endl;
    cout << "The mileage is: " << mileage << endl;
    fbin.close();
    system("PAUSE");
    return 0;
}

// Get integer function
// Get an integer from keyboard; return default
//  value if user enters 0-length string.
//
int get_int(int default_value) {
    char s[81];

    cin.getline(s, 80);
    if (strlen(s) == 0)
         return default_value;
    return atoi(s);
}
