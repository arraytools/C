// Exercise 04.03.03
// This program uses a loop that keeps calculating GCF
//  until the user enters 0.
// This version uses an iterative solution, rather than recursion.
//

#include <iostream>
#include <cmath>
using namespace std;

void get_divisors(int n);

int main() {
    int n;


    while(1) {
        cout << "Enter a number (0 to quit): ";
        cin >> n;
        if (n == 0)
            break;
        get_divisors(n);
        cout << endl;
    }
    return 0;
}

// Get divisors function:
// This is an iterative solution.
//
void get_divisors(int n) {
   int ld = 0;
   
   while (n > 0) {
       ld = find_lowest_divisor(n);
       if (ld == 0) {
           cout << n;
           n = 0;
       } else {
           cout << ld << ", ";
           n = ld;
       }
    }
    cout << endl;
}


// Get lowest divisor function
//  This function returns the lowest divisor of n, if found.
//  Otherwise, it returns 0.
//
int get_lowest_divisor(int n) {
     double sqrt_of_n = sqrt(n);

     for (int i = 2; i <= sqrt_of_n; i++)
         if (n % i == 0) {        // If i divides n evenly,
            return i;             //   exit.
         }

     return 0;   
}                        

